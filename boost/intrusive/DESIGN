Current work
==============
Figure out how to allocate the annotations object





Aims:
 - Avoid unnecessary template explosion

Nodes vs Values
===============


Algorithms Layer
================
tree_algorithms    has generic binary tree algorithms
rbtree_algorithms  wraps tree_algorithms to make a set of algorithms appropriate to rbtrees

Monoids
================

The algorithms must be able to update the monoid value
For that they need to be able to run a function that is specific to the monoid
That function needs an input which  may be constant per node, may be based purely on the 


Annotations
================
What about more generalized annotations on the tree?

There exist annotations, e.g. of subtree depth, that can be maintained in logarithmic time but do not have the associativity invairant of monoids
This breaks some optimisations such as the update-plus-copy maintenance operation for node rotations

- Start with annotations.
What does an annotation need?
	Somewhere to store a computed value
	Something to compute that value
	
Inputs to the computed value:
	* The Node
	* The Value (in the sense of ValueTraits), sometimes

There are annotations for which only node data is needed (subtree count, tree depth). other need some sort of access to the node - or a stored value

How about starting with a simple option where we store the node value if it is needed?

==== For hooks

// If explicit algo lists are going to be used, this is sufficient:
struct annotation
{
   typedef MyType type;
   static bool store_annotation_input_value; // optional
};

// otherwise, same as for trees


==== For algos

need => update()

struct annotation_for_algo
{
   const bool explicit_annotation_hook_type = true; // optional
   typedef annotation_for_hook annotation_hook;
   const bool this_or_that_optimization = true/false;

   template <class AnnotatedNodeTraits>
   static void update_node(typename AnnotatedNodeTraits::annotation_list_ptr n) {
      ...
   }
};

==== For trees/hooks

struct annotation_for_hook
{
   typedef ... type; // only required if hook is going to provide storage? TODO - check on this

   static const bool apply_config = true;

   // why do this instead of just having a nested template struct that's templated on options?
   // It reduces template explosion as unused parts of options do not become part of the type of the type passed to the algorithms
   template <typename Config>
   struct make_real_annotation {
      typedef annotation_for_algo type; // in real usage, annotation_for_algo will be templated on types/values extracted from Config
   }

};

make_real_annotation::type => for-algo annotation

==== Typical way of forming the above two types
* make the for-algo annotation an inner class of the for-hook annotation.
** this convineintly makes the hook annotation name available in the for-algo annotation for typedef'ing
* identifiers starting with "my" are names to be chosen by the user, all other names are part of the interface to the library

struct my_annotation
{
   typedef my_annotation_type type;
   static const bool apply_config = true;

   template <class MyRealAnnotationArg1>
   struct my_real_annotation {
      typedef int type;
      static const bool explicit_annotation_hook = true;
      typedef my_annotation annotation_hook;

      template <class AnnotatedNodeTraits>
      static void update_node(typename AnnotatedNodeTraits::annotation_list_ptr n) {
         ...
      }
   };

   template <class Config>
   struct make_real_annotation {
      typedef typename my_make_template_argument_1_for_real_annotation_from_config<Config>::type  my_real_annotation_arg1;

      typedef my_real_annotation<my_real_annotation_arg1> type;
   };
};


=================
Terminology

Annotation is ambiguious - it could be an object that holds an annotation value, or the struct that defines the operations
An annotation list is always a list of objects

AnnotationList... is a list of objects with storage for the annotations,
Annotations... is a list of the structs defining the operations


annotation_list - an object with  ?
annotated_node_algorithms - algorithms on an annotated node, takes an Annotations... parameter to support updating a subset of supported algorithms
annotated_node_traits - traits relating the annotations to the node, c.f. value traits
annotation_list_traits - traits relating to the list of annotations


===================
Supporting function-of-value monoids

Function-of-value monoids work by using the apply_config / make_real_annotation mechanism outlined above.
The make_real_annotation class pulls value_traits out of the config, and instantiates its actual annotation class with it as a parameter.
 This means that the annotation class used by the annotated_node_algorithms can convert a node to a value.
 However, this would mean that the type that the algos get for an annotation differs from the type supplied to the hook. To
  get around this problem, the "configured"/for-algos annotation type defines a "explicit_annotation_hook_type = true;" member,
  which tells the algos to use the "annotation_hook" typedef in the for-algos annotation when accessing the value in the hook.
  "annotation_hook" will be a typedef to the original for-trees/for-hooks annotation class which had 'make_real_annotation' in it.
 Of course, this gives annotated_node_algorithms a type dependency on value_traits, which means using function-value monoids will
  increase template explosion.
 





  trival annotated node traits != empty basic annotated node triats w/no algorithms

  rbtree_algorthms should be usable on a class with a normal hook. Currently they can't.


  hooks get their node type via algorithms. set_hook has what algorithms? set hook has annotated_rbtree_algorithms based on basic_annotated_node_traits
